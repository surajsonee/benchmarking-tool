from channel_predictions import * 

serial_number = 'A2108A04B4AC67B2F6A400'
days_back = 30

data = get_weekly_data(serial_number,days_back)

channel_dict, dates = weekday_organization(data)

last_week_cd, last_week_dp = last_week_usage(data)

'''
channel_dict and last_week_cd have the same formate they are dicts in dicts 

the keys of the outside dict are the channel names. 

the nested dict have the keys of the weekdays: 
    0 - Monday
    1
    2
    3
    4
    5
    6 - sunday

contained in each of these keys is a list of lists of 24 hour usage for that day.

example of a single key 'paint booth lights' from last_week_cd
{'paint booth lights': 
    {0: [array([0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.20445, 0.9485 , 0.9485 , 0.82919, 0.4689 , 0.8827 , 0.92041,
       0.9352 , 0.85023, 0.53335])], 
    1: [array([0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.10649, 0.70134, 0.93705, 0.81629, 0.64821, 0.74814, 0.93059,
       0.90073, 0.85423, 0.11767])],
    2: [array([0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.09664, 0.93319, 0.94473, 0.92331, 0.75822, 0.46012, 0.92532,
       0.93851, 0.90434, 0.34835])], 
    3: [array([0.14815, 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.81683, 0.9398 , 0.8975 , 0.88866, 0.70771, 0.93348,
       0.90312, 0.92704, 0.32689])], 
    4: [array([0.09512, 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.7069 , 0.72758, 0.51814, 0.81293, 0.90537, 0.76734, 0.8892 ,
       0.74846, 0.72236, 0.10792])], 
    5: [array([0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.39174, 0.92116, 0.04026, 0.     , 0.     ,
       0.     , 0.     , 0.     ])], 
    6: [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0.])]},

last_week_cd usage there will just be a single list of 24 usages for just last week. 

channel_dict: there will be mulitple lists this is used to train the regressor

dates and last_week_dp
    these variable are dates processed so it is a list of the dates that are taken into account for each of the usage dicts. 

example from last_week_dp:
[   datetime.datetime(2021, 11, 22, 0, 0), 
    datetime.datetime(2021, 11, 23, 0, 0), 
    datetime.datetime(2021, 11, 24, 0, 0), 
    datetime.datetime(2021, 11, 25, 0, 0), 
    datetime.datetime(2021, 11, 26, 0, 0), 
    datetime.datetime(2021, 11, 27, 0, 0), 
    datetime.datetime(2021, 11, 28, 0, 0)]

'''

predicted_line = weekly_predicted_line(channel_dict, last_week_cd)

'''

predicted line is a dictionary of dictionaries. 

the keys of the outside dict is the channel names so for this one it will be 
[
    'paint booth lights', 
    'paint booth air dryers',
     'paint booth air dryers 0',
     'counter receptacle',
     'microwave', 
     'vacuum', 
     'vacuum 1', 
     'vacuum 2', 
     'vacuum 3', 
     'vacuum 4', 
     'vacuum 5', 
     'water heater', 
     'mezzanine receptacle', 
     'water softener and DHW', 
     'lunch room lights'])

then the nested dict will alwasys have to keys "week_line" and "Error"

weekly_line: is the predicted line it is a list of 168 values one for each hout of the week starting at monday at 1am going to sunday at 12am 

error: is the mean squared error of the line compared to the last week actual usage.

here is a example of the first 2 keys of the data
predicted_line = 
{'paint booth lights': {'week_line': array([1.13242869e-02, 1.09699455e-02, 8.18778479e-03, 3.54523195e-04,
       1.41446293e-02, 2.48116440e-02, 2.04694204e-02, 2.52387384e-03,
       3.04095963e-02, 3.67330685e-02, 3.32876550e-03, 5.38739144e-02,
       7.52546397e-02, 1.83216010e-02, 2.69377053e-01, 6.26117821e-01,
       9.34294546e-01, 1.01988432e+00, 8.45520006e-01, 6.23391733e-01,
       6.85647663e-01, 1.00553782e+00, 8.33917372e-01, 4.91401514e-01,
       9.05917750e-04, 1.00162033e-03, 1.69099736e-03, 3.49037241e-03,
       5.37094936e-03, 4.20581478e-03, 2.73984312e-03, 1.35241602e-02,
       1.96638397e-02, 1.05560447e-02, 1.60443321e-02, 4.33209253e-02,
       3.36513770e-02, 5.72026955e-02, 2.51710184e-01, 5.22074538e-01,
       7.84779593e-01, 9.37753847e-01, 9.35730347e-01, 8.55869192e-01,
       8.63117923e-01, 9.98215574e-01, 8.90604943e-01, 3.42395824e-02,
       1.91823749e-02, 1.88282626e-02, 1.58933935e-02, 6.13157990e-03,
       1.19220101e-02, 3.14545226e-02, 3.87005402e-02, 2.29280309e-02,
       1.16469020e-02, 4.26892539e-02, 4.17841515e-02, 2.23277761e-03,
       6.30177705e-02, 7.72050548e-02, 2.51354320e-02, 2.69882279e-01,
       5.99057688e-01, 8.81400952e-01, 9.93041871e-01, 9.32500575e-01,
       8.60516512e-01, 9.28392323e-01, 9.22825997e-01, 3.74571158e-01,
       1.00794752e-02, 9.88162445e-03, 8.37753966e-03, 3.98765227e-03,
       2.44932131e-03, 6.00319140e-03, 1.06886331e-03, 1.16854356e-02,
       2.15282949e-02, 1.33431865e-02, 1.75134161e-02, 5.03280403e-02,
       3.80605127e-02, 7.03633827e-02, 2.89910941e-01, 5.65827735e-01,
       7.81484661e-01, 8.29293536e-01, 7.19219734e-01, 6.28883431e-01,
       7.57393728e-01, 9.56006734e-01, 6.08186474e-01, 5.17539779e-01,
       1.26265523e-03, 1.00927237e-03, 1.15034381e-03, 8.59510167e-03,
       2.30299194e-02, 3.97758562e-02, 4.73052443e-02, 3.37291579e-02,
       2.81568708e-03, 4.68990484e-02, 6.79767065e-02, 3.31918922e-02,
       7.48267128e-02, 2.45266613e-01, 4.40561995e-01, 6.13716006e-01,
       7.32748117e-01, 7.95966197e-01, 8.24616818e-01, 8.36534233e-01,
       8.28148028e-01, 7.92223748e-01, 7.05968202e-01, 1.10312972e-01,
       2.94408100e-02, 2.89007921e-02, 2.44464060e-02, 9.70450123e-03,
       1.74343356e-02, 4.67486585e-02, 5.79838359e-02, 3.57234545e-02,
       1.36631016e-02, 5.85195160e-02, 6.00129797e-02, 4.20622980e-03,
       7.38719511e-02, 9.81403376e-02, 6.29089389e-04, 2.18727239e-01,
       4.45036263e-01, 5.10104029e-01, 3.24809730e-01, 1.91470965e-02,
       1.05065324e-01, 4.87398786e-02, 8.34367432e-03, 3.83906217e-04,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]), 'Error': 0.014917311564080021}, 
       
       'paint booth air dryers': {'week_line': array([0.0265891 , 0.02658927, 0.02659129, 0.02660156, 0.02663304,
       0.02670098, 0.02681215, 0.02695257, 0.02708255, 0.02714564,
       0.02709136, 0.02690261, 0.02661287, 0.0262992 , 0.02604712,
       0.02590065, 0.02582788, 0.02573902, 0.02557564, 0.02543495,
       0.02559887, 0.02621797, 0.02630259, 0.0216911 , 0.02624932,
       0.0262507 , 0.02626325, 0.02631129, 0.0264227 , 0.02660616,
       0.0268372 , 0.02706624, 0.02724215, 0.02733276, 0.02732747,
       0.02722311, 0.02701119, 0.02668717, 0.02628435, 0.02590446,
       0.02569493, 0.02574283, 0.02593555, 0.02595705, 0.02562563,
       0.02544653, 0.02599644, 0.02163153, 0.02635946, 0.02635947,
       0.02636076, 0.02637168, 0.02641526, 0.02652667, 0.02673329,
       0.02702487, 0.02733411, 0.02754709, 0.02754812, 0.02728123,
       0.02679439, 0.02623364, 0.02577826, 0.02554616, 0.02553157,
       0.02563632, 0.02579726, 0.02609946, 0.02666037, 0.02714543,
       0.02637232, 0.02417282, 0.0257378 , 0.02574014, 0.02576197,
       0.02584776, 0.02605168, 0.02639351, 0.02682371, 0.02722921,
       0.02748122, 0.02749694, 0.02727779, 0.02690203, 0.02647884,
       0.02609571, 0.02579448, 0.02558864, 0.02549751, 0.02554895,
       0.0257246 , 0.02589954, 0.02591052, 0.02579438, 0.02557968,
       0.0220734 , 0.02610255, 0.02610573, 0.02613346, 0.02623273,
       0.02644026, 0.0267275 , 0.02698665, 0.02708569, 0.02695997,
       0.02667107, 0.02637975, 0.02623865, 0.02627499, 0.02635784,
       0.02630101, 0.02605076, 0.02580382, 0.02588627, 0.0263802 ,
       0.02681174, 0.02649941, 0.02580994, 0.02635883, 0.02197119,
       0.02637481, 0.02637518, 0.02637901, 0.026396  , 0.02644241,
       0.02653364, 0.02667195, 0.02683573, 0.02697766, 0.02703625,
       0.02695987, 0.02673602, 0.02641323, 0.02610067, 0.02593425,
       0.02601009, 0.02630688, 0.02664385, 0.02673808, 0.02640642,
       0.02585344, 0.02571588, 0.02596784, 0.02174083, 0.02654021,
       0.02654047, 0.02654296, 0.02655352, 0.02658146, 0.0266361 ,
       0.02672149, 0.02683155, 0.02694679, 0.02703442, 0.02705375,
       0.02696912, 0.02676934, 0.02648706, 0.0262049 , 0.02603319,
       0.02605289, 0.02624252, 0.02644352, 0.02644282, 0.02620536,
       0.02606182, 0.02605594, 0.0223788 ]), 'Error': 0.01}, 



'''


# this line will print all the charts of the channel
#graph_last_week(last_week_usage=last_week_cd, predicted_dict=predicted_line)